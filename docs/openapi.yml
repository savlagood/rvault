openapi: 3.0.2
info:
  title: "rvault - secrets storage"
  version: "0.0.1"

servers:
  - url: http://localhost:9200/api/
    description: API server

paths:
  /auth/token/issue/admin:
    post:
      summary: Generate Admin Tokens
      description: Generates a pair of admin tokens (`access_token` and `refresh_token`) using the provided `root_token`.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                root_token:
                  type: string
                  description: The root token for authentication.
              required:
                - root_token
      responses:
        "200":
          description: Successfully generated tokens.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenPair"
        "401":
          description: Unauthorized access. Invalid or missing root token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /auth/token/issue/user:
    post:
      summary: Issue User Tokens
      description: Issues an `access_token` and a `refresh_token` based on the provided policies.
      tags:
        - Authentication
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: object
                properties:
                  permissions:
                    type: array
                    description: List of topic-level permissions.
                    items:
                      type: string
                      enum: [create, read, delete]
                  secrets:
                    type: object
                    description: Object defining secret-level permissions.
                    additionalProperties:
                      type: array
                      description: List of permissions for a specific secret.
                      items:
                        type: string
                        enum: [create, read, update, delete]
      responses:
        "200":
          description: Successfully issued tokens
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenPair"
        "400":
          description: Bad Request - Invalid request payload.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized - Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /auth/token/refresh:
    post:
      summary: Refresh Tokens
      description: Issues a new pair of `access_token` and `refresh_token` by validating the provided `refresh_token`. The new tokens will have updated expiration times.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                access_token:
                  type: string
                  description: The access token whose claims will be used again.
                refresh_token:
                  type: string
                  description: The refresh token used for validation.
              required:
                - access_token
                - refresh_token
      responses:
        "200":
          description: Successfully refreshed tokens.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenPair"
        "400":
          description: Bad Request - Invalid or expired refresh token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized - Missing or malformed token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /storage/init:
    post:
      summary: Initialize Storage
      description: Initialize Storage
      tags:
        - Storage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                threshold:
                  type: integer
                  description: Minimum number of key shards required to unseal storage.
                total_keys:
                  type: integer
                  description: Total number of key shards.
      responses:
        "200":
          description: Initialization completed successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SharedKeys"
        "400":
          description: Bad request - storage is already initialized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized - Missing or malformed token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /storage/unseal:
    post:
      summary: Unseal Storage
      description: Unseal Storage
      tags:
        - Storage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SharedKeys"
      responses:
        "200":
          description: Successfully unsealed storage.
        "400":
          description: Bad request - invalid shared keys.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized - Missing or malformed token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /storage/seal:
    post:
      summary: Seal Storage
      description: Seal Storage
      tags:
        - Storage
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successfully sealed storage.
        "400":
          description: Bad request - storage is already sealed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized - Missing or malformed token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /topics:
    get:
      summary: List Topics
      description: |
        Returns a list of all topic names available
        to the admin (only for admin).
      tags:
        - Topics
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of topics retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TopicNames"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized - missing or invalid token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - insufficient permissions.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /topics/{topic_name}:
    post:
      summary: Create Topic
      description: Creates a new topic with the specified name and encryption settings.
      tags:
        - Topics
      security:
        - bearerAuth: []
      parameters:
        - name: topic_name
          in: path
          required: true
          description: Name of the topic to create.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TopicSettings"
      responses:
        "201":
          description: Topic created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TopicEncryptionKey"
        "400":
          description: Bad request - invalid topic name or storage not unsealed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized - missing or invalid token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - insufficient permissions.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Conflict - topic already exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: Delete Topic
      description: Deletes a topic and all its secrets.
      tags:
        - Topics
      security:
        - bearerAuth: []
      parameters:
        - name: topic_name
          in: path
          required: true
          description: Name of the topic to delete.
          schema:
            type: string
        - name: x-rvault-topic-key
          in: header
          required: false
          description: The encryption key for the topic (required for encrypted topics).
          schema:
            type: string
      responses:
        "204":
          description: Topic and all its secrets deleted successfully.
        "400":
          description: Bad request - storage is not unsealed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized - missing or invalid token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - insufficient permissions or invalid topic key.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not found - topic does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /topics/{topic_name}/secrets:
    get:
      summary: List Secrets
      description: Returns a list of all secret names in the specified topic.
      tags:
        - Secrets
      security:
        - bearerAuth: []
      parameters:
        - name: topic_name
          in: path
          required: true
          description: Name of the topic containing the secrets.
          schema:
            type: string
        - name: x-rvault-topic-key
          in: header
          required: false
          description: The encryption key for the topic (required for encrypted topics).
          schema:
            type: string
      responses:
        "200":
          description: List of secrets retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecretNames"
        "400":
          description: Bad request - storage is not unsealed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized - missing or invalid token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - insufficient permissions or invalid topic key.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not found - topic does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /topics/{topic_name}/secrets/{secret_name}:
    get:
      summary: Read Secret Value
      description: Retrieves the value of a specific secret from the specified topic.
      tags:
        - Secrets
      security:
        - bearerAuth: []
      parameters:
        - name: topic_name
          in: path
          required: true
          description: Name of the topic containing the secret.
          schema:
            type: string
        - name: secret_name
          in: path
          required: true
          description: Name of the secret to retrieve.
          schema:
            type: string
        - name: x-rvault-topic-key
          in: header
          required: false
          description: The encryption key for the topic (required for encrypted topics).
          schema:
            type: string
        - name: x-rvault-secret-key
          in: header
          required: false
          description: The encryption key for the secret (required for encrypted secrets).
          schema:
            type: string
      responses:
        "200":
          description: Secret value retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  value:
                    type: string
                    description: The decrypted secret value.
                  version:
                    type: integer
                    description: The version number of the secret.
        "400":
          description: Bad request - storage is not unsealed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized - missing or invalid token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - insufficient permissions or invalid encryption keys.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not found - topic or secret does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: Create Secret
      description: Creates a new secret within the specified topic.
      tags:
        - Secrets
      security:
        - bearerAuth: []
      parameters:
        - name: topic_name
          in: path
          required: true
          description: Name of the topic where the secret will be created.
          schema:
            type: string
        - name: secret_name
          in: path
          required: true
          description: Name of the secret to create.
          schema:
            type: string
        - name: x-rvault-topic-key
          in: header
          required: false
          description: The encryption key for the topic (required for encrypted topics).
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SecretSettings"
      responses:
        "201":
          description: Secret created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecretEncryptionKey"
        "400":
          description: Bad request - invalid secret name or storage not unsealed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized - missing or invalid token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - insufficient permissions or invalid topic key.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not found - topic does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Conflict - secret already exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: Update Secret Value
      description: Updates the value of an existing secret in the specified topic.
      tags:
        - Secrets
      security:
        - bearerAuth: []
      parameters:
        - name: topic_name
          in: path
          required: true
          description: Name of the topic containing the secret.
          schema:
            type: string
        - name: secret_name
          in: path
          required: true
          description: Name of the secret to update.
          schema:
            type: string
        - name: x-rvault-topic-key
          in: header
          required: false
          description: The encryption key for the topic (required for encrypted topics).
          schema:
            type: string
        - name: x-rvault-secret-key
          in: header
          required: false
          description: The encryption key for the secret (required for encrypted secrets).
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - value
              properties:
                value:
                  type: string
                  description: The new value for the secret.
      responses:
        "204":
          description: Secret value updated successfully.
        "400":
          description: Bad request - storage is not unsealed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized - missing or invalid token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - insufficient permissions or invalid encryption keys.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not found - topic or secret does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: Delete Secret
      description: Deletes a secret from the specified topic.
      tags:
        - Secrets
      security:
        - bearerAuth: []
      parameters:
        - name: topic_name
          in: path
          required: true
          description: Name of the topic containing the secret.
          schema:
            type: string
        - name: secret_name
          in: path
          required: true
          description: Name of the secret to delete.
          schema:
            type: string
        - name: x-rvault-topic-key
          in: header
          required: false
          description: The encryption key for the topic (required for encrypted topics).
          schema:
            type: string
        - name: x-rvault-secret-key
          in: header
          required: false
          description: The encryption key for the secret (required for encrypted secrets).
          schema:
            type: string
      responses:
        "204":
          description: Secret deleted successfully.
        "400":
          description: Bad request - storage is not unsealed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized - missing or invalid token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - insufficient permissions or invalid encryption keys.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not found - topic or secret does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /topics/{topic_name}/secrets/{secret_name}/versions:
    get:
      summary: Get Secret Versions
      description: Retrieves all versions of a specific secret from the specified topic.
      tags:
        - Secrets
      security:
        - bearerAuth: []
      parameters:
        - name: topic_name
          in: path
          required: true
          description: Name of the topic containing the secret.
          schema:
            type: string
        - name: secret_name
          in: path
          required: true
          description: Name of the secret to retrieve versions for.
          schema:
            type: string
        - name: x-rvault-topic-key
          in: header
          required: false
          description: The encryption key for the topic (required for encrypted topics).
          schema:
            type: string
        - name: x-rvault-secret-key
          in: header
          required: false
          description: The encryption key for the secret (required for encrypted secrets).
          schema:
            type: string
      responses:
        "200":
          description: Secret versions retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecretVersions"
        "400":
          description: Bad request - storage is not unsealed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized - missing or invalid token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - insufficient permissions or invalid encryption keys.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not found - topic or secret does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /topics/{topic_name}/secrets/{secret_name}/versions/current:
    put:
      summary: Update Current Secret Version
      description: Updates the pointer to the current version of the secret without modifying any values.
      tags:
        - Secrets
      security:
        - bearerAuth: []
      parameters:
        - name: topic_name
          in: path
          required: true
          description: Name of the topic containing the secret.
          schema:
            type: string
        - name: secret_name
          in: path
          required: true
          description: Name of the secret to update version for.
          schema:
            type: string
        - name: x-rvault-topic-key
          in: header
          required: false
          description: The encryption key for the topic (required for encrypted topics).
          schema:
            type: string
        - name: x-rvault-secret-key
          in: header
          required: false
          description: The encryption key for the secret (required for encrypted secrets).
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - version
              properties:
                version:
                  type: integer
                  description: The version number to set as current.
      responses:
        "204":
          description: Current version updated successfully.
        "400":
          description: Bad request - storage is not unsealed or invalid version number.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized - missing or invalid token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - insufficient permissions or invalid encryption keys.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not found - topic, secret or version does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "500":
          $ref: "#/components/responses/InternalServerError"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: jwt

  responses:
    UnprocessableEntity:
      description: Unprocessable entity
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    InternalServerError:
      description: Internal server error.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

  schemas:
    TokenPair:
      type: object
      properties:
        access_token:
          type: string
          description: The access token.
        refresh_token:
          type: string
          description: The refresh token.

    SharedKeys:
      type: object
      properties:
        shares:
          type: array
          description: The distributed key shards.
          items:
            type: string

    TopicNames:
      type: object
      properties:
        names:
          type: array
          description: List of topic names.
          items:
            type: string

    TopicSettings:
      type: object
      properties:
        encryption:
          oneOf:
            - type: object
              required:
                - mode
              properties:
                mode:
                  type: string
                  enum: [none, generate]
            - type: object
              required:
                - mode
                - key
              properties:
                mode:
                  type: string
                  enum: [provided]
                key:
                  type: string
                  description: The encryption key to use.

    TopicEncryptionKey:
      type: object
      properties:
        topic_key:
          type: string
          description: The encryption key for the topic. Only returned for 'generate' and 'provided' modes.

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message.

    SecretNames:
      type: object
      properties:
        names:
          type: array
          description: List of secret names.
          items:
            type: string

    SecretSettings:
      type: object
      required:
        - value
        - encryption
      properties:
        value:
          type: string
          description: The secret value to store.
        encryption:
          oneOf:
            - type: object
              required:
                - mode
              properties:
                mode:
                  type: string
                  enum: [none, generate]
            - type: object
              required:
                - mode
                - key
              properties:
                mode:
                  type: string
                  enum: [provided]
                key:
                  type: string
                  description: The encryption key to use.

    SecretEncryptionKey:
      type: object
      properties:
        secret_key:
          type: string
          description: The encryption key for the secret. Only returned for 'generate' and 'provided' modes.

    SecretVersions:
      type: object
      properties:
        current:
          type: integer
          description: The index of the current active version.
        versions:
          type: array
          description: List of all secret versions.
          items:
            type: object
            properties:
              value:
                type: string
                description: The decrypted secret value.
              version:
                type: integer
                description: The version number of the secret.
